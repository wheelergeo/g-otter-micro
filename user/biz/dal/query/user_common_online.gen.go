// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wheelergeo/g-otter-micro-user/biz/dal/model"
)

func newUserCommonOnline(db *gorm.DB, opts ...gen.DOOption) userCommonOnline {
	_userCommonOnline := userCommonOnline{}

	_userCommonOnline.userCommonOnlineDo.UseDB(db, opts...)
	_userCommonOnline.userCommonOnlineDo.UseModel(&model.UserCommonOnline{})

	tableName := _userCommonOnline.userCommonOnlineDo.TableName()
	_userCommonOnline.ALL = field.NewAsterisk(tableName)
	_userCommonOnline.ID = field.NewInt64(tableName, "id")
	_userCommonOnline.UUID = field.NewInt64(tableName, "uuid")
	_userCommonOnline.LoginAt = field.NewTime(tableName, "login_at")
	_userCommonOnline.UserName = field.NewString(tableName, "user_name")
	_userCommonOnline.PhoneNumber = field.NewString(tableName, "phone_number")
	_userCommonOnline.Token = field.NewString(tableName, "token")
	_userCommonOnline.TokenExpiredAt = field.NewTime(tableName, "token_expired_at")
	_userCommonOnline.IP = field.NewString(tableName, "ip")
	_userCommonOnline.Explorer = field.NewString(tableName, "explorer")
	_userCommonOnline.Os = field.NewString(tableName, "os")
	_userCommonOnline.Client = field.NewString(tableName, "client")

	_userCommonOnline.fillFieldMap()

	return _userCommonOnline
}

type userCommonOnline struct {
	userCommonOnlineDo userCommonOnlineDo

	ALL            field.Asterisk
	ID             field.Int64
	UUID           field.Int64  // 用户标识
	LoginAt        field.Time   // 登录时间
	UserName       field.String // 用户名
	PhoneNumber    field.String // 手机号
	Token          field.String // 用户token
	TokenExpiredAt field.Time   // token过期时间
	IP             field.String // 登录ip
	Explorer       field.String // 浏览器
	Os             field.String // 操作系统
	Client         field.String // 登录客户端：web，wx，dy，app

	fieldMap map[string]field.Expr
}

func (u userCommonOnline) Table(newTableName string) *userCommonOnline {
	u.userCommonOnlineDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCommonOnline) As(alias string) *userCommonOnline {
	u.userCommonOnlineDo.DO = *(u.userCommonOnlineDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCommonOnline) updateTableName(table string) *userCommonOnline {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UUID = field.NewInt64(table, "uuid")
	u.LoginAt = field.NewTime(table, "login_at")
	u.UserName = field.NewString(table, "user_name")
	u.PhoneNumber = field.NewString(table, "phone_number")
	u.Token = field.NewString(table, "token")
	u.TokenExpiredAt = field.NewTime(table, "token_expired_at")
	u.IP = field.NewString(table, "ip")
	u.Explorer = field.NewString(table, "explorer")
	u.Os = field.NewString(table, "os")
	u.Client = field.NewString(table, "client")

	u.fillFieldMap()

	return u
}

func (u *userCommonOnline) WithContext(ctx context.Context) *userCommonOnlineDo {
	return u.userCommonOnlineDo.WithContext(ctx)
}

func (u userCommonOnline) TableName() string { return u.userCommonOnlineDo.TableName() }

func (u userCommonOnline) Alias() string { return u.userCommonOnlineDo.Alias() }

func (u *userCommonOnline) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCommonOnline) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uuid"] = u.UUID
	u.fieldMap["login_at"] = u.LoginAt
	u.fieldMap["user_name"] = u.UserName
	u.fieldMap["phone_number"] = u.PhoneNumber
	u.fieldMap["token"] = u.Token
	u.fieldMap["token_expired_at"] = u.TokenExpiredAt
	u.fieldMap["ip"] = u.IP
	u.fieldMap["explorer"] = u.Explorer
	u.fieldMap["os"] = u.Os
	u.fieldMap["client"] = u.Client
}

func (u userCommonOnline) clone(db *gorm.DB) userCommonOnline {
	u.userCommonOnlineDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCommonOnline) replaceDB(db *gorm.DB) userCommonOnline {
	u.userCommonOnlineDo.ReplaceDB(db)
	return u
}

type userCommonOnlineDo struct{ gen.DO }

func (u userCommonOnlineDo) Debug() *userCommonOnlineDo {
	return u.withDO(u.DO.Debug())
}

func (u userCommonOnlineDo) WithContext(ctx context.Context) *userCommonOnlineDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCommonOnlineDo) ReadDB() *userCommonOnlineDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCommonOnlineDo) WriteDB() *userCommonOnlineDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCommonOnlineDo) Session(config *gorm.Session) *userCommonOnlineDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCommonOnlineDo) Clauses(conds ...clause.Expression) *userCommonOnlineDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCommonOnlineDo) Returning(value interface{}, columns ...string) *userCommonOnlineDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCommonOnlineDo) Not(conds ...gen.Condition) *userCommonOnlineDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCommonOnlineDo) Or(conds ...gen.Condition) *userCommonOnlineDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCommonOnlineDo) Select(conds ...field.Expr) *userCommonOnlineDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCommonOnlineDo) Where(conds ...gen.Condition) *userCommonOnlineDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCommonOnlineDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userCommonOnlineDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userCommonOnlineDo) Order(conds ...field.Expr) *userCommonOnlineDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCommonOnlineDo) Distinct(cols ...field.Expr) *userCommonOnlineDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCommonOnlineDo) Omit(cols ...field.Expr) *userCommonOnlineDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCommonOnlineDo) Join(table schema.Tabler, on ...field.Expr) *userCommonOnlineDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCommonOnlineDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userCommonOnlineDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCommonOnlineDo) RightJoin(table schema.Tabler, on ...field.Expr) *userCommonOnlineDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCommonOnlineDo) Group(cols ...field.Expr) *userCommonOnlineDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCommonOnlineDo) Having(conds ...gen.Condition) *userCommonOnlineDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCommonOnlineDo) Limit(limit int) *userCommonOnlineDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCommonOnlineDo) Offset(offset int) *userCommonOnlineDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCommonOnlineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userCommonOnlineDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCommonOnlineDo) Unscoped() *userCommonOnlineDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCommonOnlineDo) Create(values ...*model.UserCommonOnline) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCommonOnlineDo) CreateInBatches(values []*model.UserCommonOnline, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCommonOnlineDo) Save(values ...*model.UserCommonOnline) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCommonOnlineDo) First() (*model.UserCommonOnline, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonOnline), nil
	}
}

func (u userCommonOnlineDo) Take() (*model.UserCommonOnline, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonOnline), nil
	}
}

func (u userCommonOnlineDo) Last() (*model.UserCommonOnline, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonOnline), nil
	}
}

func (u userCommonOnlineDo) Find() ([]*model.UserCommonOnline, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCommonOnline), err
}

func (u userCommonOnlineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCommonOnline, err error) {
	buf := make([]*model.UserCommonOnline, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCommonOnlineDo) FindInBatches(result *[]*model.UserCommonOnline, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCommonOnlineDo) Attrs(attrs ...field.AssignExpr) *userCommonOnlineDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCommonOnlineDo) Assign(attrs ...field.AssignExpr) *userCommonOnlineDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCommonOnlineDo) Joins(fields ...field.RelationField) *userCommonOnlineDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCommonOnlineDo) Preload(fields ...field.RelationField) *userCommonOnlineDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCommonOnlineDo) FirstOrInit() (*model.UserCommonOnline, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonOnline), nil
	}
}

func (u userCommonOnlineDo) FirstOrCreate() (*model.UserCommonOnline, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonOnline), nil
	}
}

func (u userCommonOnlineDo) FindByPage(offset int, limit int) (result []*model.UserCommonOnline, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCommonOnlineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCommonOnlineDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCommonOnlineDo) Delete(models ...*model.UserCommonOnline) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCommonOnlineDo) withDO(do gen.Dao) *userCommonOnlineDo {
	u.DO = *do.(*gen.DO)
	return u
}
