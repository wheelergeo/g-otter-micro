// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wheelergeo/g-otter-micro-user/biz/dal/model"
)

func newUserCommonDept(db *gorm.DB, opts ...gen.DOOption) userCommonDept {
	_userCommonDept := userCommonDept{}

	_userCommonDept.userCommonDeptDo.UseDB(db, opts...)
	_userCommonDept.userCommonDeptDo.UseModel(&model.UserCommonDept{})

	tableName := _userCommonDept.userCommonDeptDo.TableName()
	_userCommonDept.ALL = field.NewAsterisk(tableName)
	_userCommonDept.ID = field.NewInt64(tableName, "id")
	_userCommonDept.ParentID = field.NewInt64(tableName, "parent_id")
	_userCommonDept.AncestorID = field.NewInt64(tableName, "ancestor_id")
	_userCommonDept.DeptName = field.NewString(tableName, "dept_name")
	_userCommonDept.OrderNum = field.NewInt32(tableName, "order_num")
	_userCommonDept.Leader = field.NewString(tableName, "leader")
	_userCommonDept.PhoneNumber = field.NewString(tableName, "phone_number")
	_userCommonDept.Email = field.NewString(tableName, "email")
	_userCommonDept.Status = field.NewInt32(tableName, "status")
	_userCommonDept.CreatedAt = field.NewTime(tableName, "created_at")
	_userCommonDept.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userCommonDept.DeletedAt = field.NewField(tableName, "deleted_at")

	_userCommonDept.fillFieldMap()

	return _userCommonDept
}

type userCommonDept struct {
	userCommonDeptDo userCommonDeptDo

	ALL         field.Asterisk
	ID          field.Int64  // 部门id
	ParentID    field.Int64  // 父级id
	AncestorID  field.Int64  // 祖先id
	DeptName    field.String // 部门名称
	OrderNum    field.Int32  // 显示顺序
	Leader      field.String // 负责人
	PhoneNumber field.String // 联系电话
	Email       field.String // 邮箱
	Status      field.Int32  // 部门状态（0正常 1停用）
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field // 删除时间

	fieldMap map[string]field.Expr
}

func (u userCommonDept) Table(newTableName string) *userCommonDept {
	u.userCommonDeptDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCommonDept) As(alias string) *userCommonDept {
	u.userCommonDeptDo.DO = *(u.userCommonDeptDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCommonDept) updateTableName(table string) *userCommonDept {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.ParentID = field.NewInt64(table, "parent_id")
	u.AncestorID = field.NewInt64(table, "ancestor_id")
	u.DeptName = field.NewString(table, "dept_name")
	u.OrderNum = field.NewInt32(table, "order_num")
	u.Leader = field.NewString(table, "leader")
	u.PhoneNumber = field.NewString(table, "phone_number")
	u.Email = field.NewString(table, "email")
	u.Status = field.NewInt32(table, "status")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userCommonDept) WithContext(ctx context.Context) *userCommonDeptDo {
	return u.userCommonDeptDo.WithContext(ctx)
}

func (u userCommonDept) TableName() string { return u.userCommonDeptDo.TableName() }

func (u userCommonDept) Alias() string { return u.userCommonDeptDo.Alias() }

func (u *userCommonDept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCommonDept) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["ancestor_id"] = u.AncestorID
	u.fieldMap["dept_name"] = u.DeptName
	u.fieldMap["order_num"] = u.OrderNum
	u.fieldMap["leader"] = u.Leader
	u.fieldMap["phone_number"] = u.PhoneNumber
	u.fieldMap["email"] = u.Email
	u.fieldMap["status"] = u.Status
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userCommonDept) clone(db *gorm.DB) userCommonDept {
	u.userCommonDeptDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCommonDept) replaceDB(db *gorm.DB) userCommonDept {
	u.userCommonDeptDo.ReplaceDB(db)
	return u
}

type userCommonDeptDo struct{ gen.DO }

func (u userCommonDeptDo) Debug() *userCommonDeptDo {
	return u.withDO(u.DO.Debug())
}

func (u userCommonDeptDo) WithContext(ctx context.Context) *userCommonDeptDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCommonDeptDo) ReadDB() *userCommonDeptDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCommonDeptDo) WriteDB() *userCommonDeptDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCommonDeptDo) Session(config *gorm.Session) *userCommonDeptDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCommonDeptDo) Clauses(conds ...clause.Expression) *userCommonDeptDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCommonDeptDo) Returning(value interface{}, columns ...string) *userCommonDeptDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCommonDeptDo) Not(conds ...gen.Condition) *userCommonDeptDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCommonDeptDo) Or(conds ...gen.Condition) *userCommonDeptDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCommonDeptDo) Select(conds ...field.Expr) *userCommonDeptDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCommonDeptDo) Where(conds ...gen.Condition) *userCommonDeptDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCommonDeptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userCommonDeptDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userCommonDeptDo) Order(conds ...field.Expr) *userCommonDeptDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCommonDeptDo) Distinct(cols ...field.Expr) *userCommonDeptDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCommonDeptDo) Omit(cols ...field.Expr) *userCommonDeptDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCommonDeptDo) Join(table schema.Tabler, on ...field.Expr) *userCommonDeptDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCommonDeptDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userCommonDeptDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCommonDeptDo) RightJoin(table schema.Tabler, on ...field.Expr) *userCommonDeptDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCommonDeptDo) Group(cols ...field.Expr) *userCommonDeptDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCommonDeptDo) Having(conds ...gen.Condition) *userCommonDeptDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCommonDeptDo) Limit(limit int) *userCommonDeptDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCommonDeptDo) Offset(offset int) *userCommonDeptDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCommonDeptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userCommonDeptDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCommonDeptDo) Unscoped() *userCommonDeptDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCommonDeptDo) Create(values ...*model.UserCommonDept) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCommonDeptDo) CreateInBatches(values []*model.UserCommonDept, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCommonDeptDo) Save(values ...*model.UserCommonDept) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCommonDeptDo) First() (*model.UserCommonDept, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonDept), nil
	}
}

func (u userCommonDeptDo) Take() (*model.UserCommonDept, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonDept), nil
	}
}

func (u userCommonDeptDo) Last() (*model.UserCommonDept, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonDept), nil
	}
}

func (u userCommonDeptDo) Find() ([]*model.UserCommonDept, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCommonDept), err
}

func (u userCommonDeptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCommonDept, err error) {
	buf := make([]*model.UserCommonDept, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCommonDeptDo) FindInBatches(result *[]*model.UserCommonDept, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCommonDeptDo) Attrs(attrs ...field.AssignExpr) *userCommonDeptDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCommonDeptDo) Assign(attrs ...field.AssignExpr) *userCommonDeptDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCommonDeptDo) Joins(fields ...field.RelationField) *userCommonDeptDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCommonDeptDo) Preload(fields ...field.RelationField) *userCommonDeptDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCommonDeptDo) FirstOrInit() (*model.UserCommonDept, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonDept), nil
	}
}

func (u userCommonDeptDo) FirstOrCreate() (*model.UserCommonDept, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCommonDept), nil
	}
}

func (u userCommonDeptDo) FindByPage(offset int, limit int) (result []*model.UserCommonDept, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCommonDeptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCommonDeptDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCommonDeptDo) Delete(models ...*model.UserCommonDept) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCommonDeptDo) withDO(do gen.Dao) *userCommonDeptDo {
	u.DO = *do.(*gen.DO)
	return u
}
